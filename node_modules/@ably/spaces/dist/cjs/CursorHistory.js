"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class CursorHistory {
    constructor() { }
    positionsMissing(connections) {
        return Object.keys(connections).some((connectionId) => connections[connectionId] === null);
    }
    messageToUpdate(connectionId, clientId, update) {
        return {
            clientId,
            connectionId,
            position: update.position,
            data: update.data,
        };
    }
    allCursorUpdates(connections, page) {
        return Object.fromEntries(Object.entries(connections).map(([connectionId, cursors]) => {
            var _a;
            const lastMessage = page.items.find((item) => item.connectionId === connectionId);
            if (!lastMessage)
                return [connectionId, cursors];
            const { data = [], clientId } = lastMessage;
            const lastPositionSet = (_a = data[data.length - 1]) === null || _a === void 0 ? void 0 : _a.cursor;
            const lastUpdate = lastPositionSet
                ? {
                    clientId,
                    connectionId,
                    position: lastPositionSet.position,
                    data: lastPositionSet.data,
                }
                : null;
            return [connectionId, lastUpdate];
        }));
    }
    getLastCursorUpdate(channel, paginationLimit) {
        return __awaiter(this, void 0, void 0, function* () {
            const members = yield channel.presence.get();
            if (members.length === 0)
                return {};
            let connections = members.reduce((acc, member) => (Object.assign(Object.assign({}, acc), { [member.connectionId]: null })), {});
            const history = yield channel.history();
            let pageNo = 1;
            let page = yield history.current();
            connections = this.allCursorUpdates(connections, page);
            pageNo++;
            while (pageNo <= paginationLimit && this.positionsMissing(connections) && history.hasNext()) {
                page = yield history.next();
                connections = this.allCursorUpdates(connections, page);
                pageNo++;
            }
            return connections;
        });
    }
}
exports.default = CursorHistory;
//# sourceMappingURL=CursorHistory.js.map