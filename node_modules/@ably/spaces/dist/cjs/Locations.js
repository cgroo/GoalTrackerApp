"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter_js_1 = __importStar(require("./utilities/EventEmitter.js"));
const Errors_js_1 = require("./Errors.js");
const SpaceUpdate_js_1 = __importDefault(require("./SpaceUpdate.js"));
/**
 * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/locations.textile?plain=1#L9-L11) -->
 * The member location feature enables you to track where members are within a space, to see which part of your application they’re interacting with. A location could be the form field they have selected, the cell they’re currently editing in a spreadsheet, or the slide they’re viewing within a slide deck. Multiple members can be present in the same location.
 *
 * Member locations are used to visually display which component other members currently have selected, or are currently active on. Events are emitted whenever a member sets their location, such as when they click on a new cell, or slide. Events are received by members subscribed to location events and the UI component can be highlighted with the active member’s profile data to visually display their location.
 *
 * <!-- END WEBSITE DOCUMENTATION -->
 *
 * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/locations.textile?plain=1#L211-L215) -->
 * ## Member location foundations
 *
 * The Spaces SDK is built upon existing Ably functionality available in Ably’s Core SDKs. Understanding which core features are used to provide the abstractions in the Spaces SDK enables you to manage space state and build additional functionality into your application.
 *
 * Member locations build upon the functionality of the Pub/Sub Channels [presence](https://ably.com/docs/presence-occupancy/presence) feature. Members are entered into the presence set when they {@link Space.enter | enter the space}.
 *
 * <!-- END WEBSITE DOCUMENTATION -->
 *
 * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
 * Handles the tracking of member locations within a space. Inherits from {@link EventEmitter}.
 * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
 */
class Locations extends EventEmitter_js_1.default {
    /** @internal */
    constructor(space, presenceUpdate) {
        super();
        this.space = space;
        this.presenceUpdate = presenceUpdate;
        this.lastLocationUpdate = {};
    }
    /** @internal */
    processPresenceMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            // Only an update action is currently a valid location update.
            if (message.action !== 'update')
                return;
            // Emit updates only if they are different than the last held update.
            if (!message.data.locationUpdate.id ||
                this.lastLocationUpdate[message.connectionId] === message.data.locationUpdate.id) {
                return;
            }
            const update = message.data.locationUpdate;
            const { previous } = update;
            const member = yield this.space.members.getByConnectionId(message.connectionId);
            if (member) {
                this.emit('update', {
                    member,
                    currentLocation: member.location,
                    previousLocation: previous,
                });
                this.lastLocationUpdate[message.connectionId] = message.data.locationUpdate.id;
            }
        });
    }
    /**
     * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/locations.textile?plain=1#L15-L25) -->
     * Use the `set()` method to emit a location event in realtime when a member changes their location. This will be received by all location subscribers to inform them of the location change. A `location` can be any JSON-serializable object, such as a slide number or element ID.
     *
     * A member must have been { @link Space.enter | entered } into the space to set their location.
     *
     * The `set()` method is commonly combined with [`addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) or a React [synthetic event](https://react.dev/learn/responding-to-events#adding-event-handlers), such as `onClick` or `onHover`.
     *
     * The following is an example of a member setting their location to a specific slide number, and element on that slide:
     *
     * ```javascript
     * await space.locations.set({ slide: '3', component: 'slide-title' });
     * ```
     * <!-- END WEBSITE DOCUMENTATION -->
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Set your current location. The `location` argument can be any JSON-serializable object. Emits a `locationUpdate` event to all connected clients in this space.
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     *
     * <!-- Second sentence copied from above -->
     * @param location The new location. Can be any JSON-serializable object, such as a slide number or element ID.
     */
    set(location) {
        return __awaiter(this, void 0, void 0, function* () {
            const self = yield this.space.members.getSelf();
            if (!self) {
                throw (0, Errors_js_1.ERR_NOT_ENTERED_SPACE)();
            }
            const update = new SpaceUpdate_js_1.default({ self, extras: this.space.locks.getLockExtras(self.connectionId) });
            yield this.presenceUpdate(update.updateLocation(location));
        });
    }
    subscribe(listenerOrEvents, listener) {
        try {
            super.on(listenerOrEvents, listener);
        }
        catch (e) {
            if (e instanceof EventEmitter_js_1.InvalidArgumentError) {
                throw new EventEmitter_js_1.InvalidArgumentError('Locations.subscribe(): Invalid arguments: ' + (0, EventEmitter_js_1.inspect)([listenerOrEvents, listener]));
            }
            else {
                throw e;
            }
        }
    }
    unsubscribe(listenerOrEvents, listener) {
        try {
            super.off(listenerOrEvents, listener);
        }
        catch (e) {
            if (e instanceof EventEmitter_js_1.InvalidArgumentError) {
                throw new EventEmitter_js_1.InvalidArgumentError('Locations.unsubscribe(): Invalid arguments: ' + (0, EventEmitter_js_1.inspect)([listenerOrEvents, listener]));
            }
            else {
                throw e;
            }
        }
    }
    /**
     * <!-- This is to avoid duplication of the website documentation. -->
     * See the documentation for {@link getAll}.
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Get location for self.
     *
     * Example:
     *
     * ```ts
     * const myLocation = await space.locations.getSelf();
     * ```
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     */
    getSelf() {
        return __awaiter(this, void 0, void 0, function* () {
            const self = yield this.space.members.getSelf();
            return self ? self.location : null;
        });
    }
    /**
     * <!-- This is to avoid duplication of the website documentation. -->
     * See the documentation for {@link getAll}.
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Get location for other members
     *
     * Example:
     *
     * ```ts
     * const otherLocations = await space.locations.getOthers()
     * ```
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     */
    getOthers() {
        return __awaiter(this, void 0, void 0, function* () {
            const members = yield this.space.members.getOthers();
            return members.reduce((acc, member) => {
                acc[member.connectionId] = member.location;
                return acc;
            }, {});
        });
    }
    /**
     * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/locations.textile?plain=1#L111-L172) -->
     * Member locations can also be retrieved in one-off calls. These are local calls and retrieve the location of members retained in memory by the SDK.
     *
     * The following is an example of retrieving a member’s own location:
     *
     * ```javascript
     * const myLocation = await space.locations.getSelf();
     * ```
     * The following is an example payload returned by `space.locations.getSelf()`. It will return the properties of the member’s `location`:
     *
     * ```json
     * {
     *   "slide": "3",
     *   "component": "slide-title"
     * }
     * ```
     * The following is an example of retrieving the location objects of all members other than the member themselves.
     *
     * ```javascript
     * const othersLocations = await space.locations.getOthers();
     * ```
     * The following is an example payload returned by `space.locations.getOthers()`: It will return the properties of all member’s `location` by their `connectionId`:
     *
     * ```json
     * {
     *   "xG6H3lnrCn": {
     *       "slide": "1",
     *       "component": "textBox-1"
     *   },
     *   "el29SVLktW": {
     *       "slide": "1",
     *       "component": "image-2"
     *   }
     * }
     * ```
     * The following is an example of retrieving the location objects of all members, including the member themselves:
     *
     * ```javascript
     * const allLocations = await space.locations.getAll();
     * ```
     * The following is an example payload returned by `space.locations.getAll()`. It will return the properties of all member’s `location` by their `connectionId`:
     *
     * ```json
     * {
     *   "xG6H3lnrCn": {
     *       "slide": "1",
     *       "component": "textBox-1"
     *   },
     *   "el29SVLktW": {
     *       "slide": "1",
     *       "component": "image-2"
     *   },
     *   "dieF3291kT": {
     *       "slide": "3",
     *       "component": "slide-title"
     *   }
     * }
     * ```
     * <!-- END WEBSITE DOCUMENTATION -->
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Get location for all members.
     *
     * Example:
     *
     * ```ts
     * const allLocations = await space.locations.getAll();
     * ```
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     */
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const members = yield this.space.members.getAll();
            return members.reduce((acc, member) => {
                acc[member.connectionId] = member.location;
                return acc;
            }, {});
        });
    }
}
exports.default = Locations;
//# sourceMappingURL=Locations.js.map