"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceProvider = exports.SpaceContext = void 0;
const react_1 = __importDefault(require("react"));
const useSpaces_js_1 = require("../useSpaces.js");
exports.SpaceContext = react_1.default.createContext(undefined);
const SpaceProvider = ({ name, options, children }) => {
    const [space, setSpace] = react_1.default.useState(undefined);
    const spaces = (0, useSpaces_js_1.useSpaces)();
    const optionsRef = react_1.default.useRef(options);
    react_1.default.useEffect(() => {
        optionsRef.current = options;
    }, [options]);
    react_1.default.useEffect(() => {
        let ignore = false;
        const init = () => __awaiter(void 0, void 0, void 0, function* () {
            if (!spaces) {
                throw new Error('Could not find spaces client in context. ' +
                    'Make sure your spaces hooks are called inside an <SpacesProvider>');
            }
            const spaceInstance = yield spaces.get(name, optionsRef.current);
            if (spaceInstance && !space && !ignore) {
                setSpace(spaceInstance);
            }
        });
        init();
        return () => {
            ignore = true;
        };
    }, [name, spaces]);
    return react_1.default.createElement(exports.SpaceContext.Provider, { value: space }, children);
};
exports.SpaceProvider = SpaceProvider;
//# sourceMappingURL=SpaceContext.js.map