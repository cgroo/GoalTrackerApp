import type { CursorUpdate, SpaceMember } from '../types.js';
import type { ErrorInfo } from 'ably';
import type Cursors from '../Cursors.js';
import type { UseSpaceOptions } from './types.js';
import type { Space } from '..';
interface UseCursorsOptions extends UseSpaceOptions {
    /**
     * Whether to return the cursors object described in UseCursorsResult, defaults to false
     */
    returnCursors?: boolean;
}
interface UseCursorsResult {
    space?: Space;
    connectionError: ErrorInfo | null;
    channelError: ErrorInfo | null;
    set?: Cursors['set'];
    /**
     * if UseCursorsOptions.returnCursors is truthy; a map from connectionId to associated space member and their cursor update
     */
    cursors: Record<string, {
        member: SpaceMember;
        cursorUpdate: CursorUpdate;
    }>;
}
type UseCursorsCallback = (params: CursorUpdate) => void;
/**
 * Registers a subscription on the `Space.cursors` object
 */
declare function useCursors(options?: UseCursorsOptions): UseCursorsResult;
declare function useCursors(callback: UseCursorsCallback, options?: UseCursorsOptions): UseCursorsResult;
export { useCursors };
