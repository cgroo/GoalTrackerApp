import type { Types } from 'ably';
type EventListener<T> = (stateChange: T) => void;
/**
 * todo use `ably/react` hooks instead
 */
export declare const useEventListener: <S extends "failed" | "initialized" | "suspended" | "attached" | "attaching" | "detached" | "detaching" | "connected" | "connecting" | "disconnected" | "closed" | "closing", C extends Types.ChannelStateChange | Types.ConnectionStateChange>(emitter?: Types.EventEmitter<EventListener<C>, C, S> | undefined, listener?: EventListener<C> | undefined, event?: S | S[] | undefined) => void;
export {};
