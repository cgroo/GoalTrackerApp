"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLocations = void 0;
const react_1 = require("react");
const SpaceContext_js_1 = require("./contexts/SpaceContext.js");
const is_js_1 = require("../utilities/is.js");
/*
 * Registers a subscription on the `Space.locations` object
 */
function useLocations(eventOrCallback, callbackOrOptions, optionsOrNothing) {
    const space = (0, react_1.useContext)(SpaceContext_js_1.SpaceContext);
    const locations = space === null || space === void 0 ? void 0 : space.locations;
    const callback = (0, is_js_1.isString)(eventOrCallback) || (0, is_js_1.isArray)(eventOrCallback)
        ? callbackOrOptions
        : eventOrCallback;
    const options = (0, is_js_1.isFunction)(callbackOrOptions) ? optionsOrNothing : callbackOrOptions;
    const callbackRef = (0, react_1.useRef)(callback);
    (0, react_1.useEffect)(() => {
        callbackRef.current = callback;
    }, [callback]);
    (0, react_1.useEffect)(() => {
        if (callbackRef.current && locations && !(options === null || options === void 0 ? void 0 : options.skip)) {
            const listener = (params) => {
                var _a;
                (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, params);
            };
            if (!(0, is_js_1.isFunction)(eventOrCallback) && eventOrCallback) {
                locations.subscribe(eventOrCallback, listener);
            }
            else {
                locations.subscribe(listener);
            }
            return () => {
                if (!(0, is_js_1.isFunction)(eventOrCallback) && eventOrCallback) {
                    locations.unsubscribe(eventOrCallback, listener);
                }
                else {
                    locations.unsubscribe(listener);
                }
            };
        }
    }, [locations, options === null || options === void 0 ? void 0 : options.skip]);
    return {
        space,
        update: locations === null || locations === void 0 ? void 0 : locations.set.bind(locations),
    };
}
exports.useLocations = useLocations;
//# sourceMappingURL=useLocations.js.map