"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLocks = void 0;
const react_1 = require("react");
const is_js_1 = require("../utilities/is.js");
const useSpace_js_1 = require("./useSpace.js");
function useLocks(eventOrCallback, callbackOrOptions, optionsOrNothing) {
    const spaceContext = (0, useSpace_js_1.useSpace)();
    const { space } = spaceContext;
    const callback = (0, is_js_1.isString)(eventOrCallback) || (0, is_js_1.isArray)(eventOrCallback) ? callbackOrOptions : eventOrCallback;
    const options = (0, is_js_1.isFunction)(callbackOrOptions) ? optionsOrNothing : callbackOrOptions;
    const callbackRef = (0, react_1.useRef)(callback);
    (0, react_1.useEffect)(() => {
        callbackRef.current = callback;
    }, [callback]);
    (0, react_1.useEffect)(() => {
        if (callbackRef.current && (space === null || space === void 0 ? void 0 : space.locks) && !(options === null || options === void 0 ? void 0 : options.skip)) {
            const listener = (params) => {
                var _a;
                (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, params);
            };
            if (!(0, is_js_1.isFunction)(eventOrCallback) && eventOrCallback) {
                space === null || space === void 0 ? void 0 : space.locks.subscribe(eventOrCallback, listener);
            }
            else {
                space === null || space === void 0 ? void 0 : space.locks.subscribe(listener);
            }
            return () => {
                if (!(0, is_js_1.isFunction)(eventOrCallback) && eventOrCallback) {
                    space === null || space === void 0 ? void 0 : space.locks.unsubscribe(eventOrCallback, listener);
                }
                else {
                    space === null || space === void 0 ? void 0 : space.locks.unsubscribe(listener);
                }
            };
        }
    }, [space === null || space === void 0 ? void 0 : space.locks, options === null || options === void 0 ? void 0 : options.skip]);
    return spaceContext;
}
exports.useLocks = useLocks;
//# sourceMappingURL=useLocks.js.map