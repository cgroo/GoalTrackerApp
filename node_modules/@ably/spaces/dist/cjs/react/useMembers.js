"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMembers = void 0;
const react_1 = require("react");
const useSpace_js_1 = require("./useSpace.js");
const is_js_1 = require("../utilities/is.js");
function useMembers(eventOrCallback, callbackOrOptions, optionsOrNothing) {
    const { space, connectionError, channelError } = (0, useSpace_js_1.useSpace)();
    const [members, setMembers] = (0, react_1.useState)([]);
    const [others, setOthers] = (0, react_1.useState)([]);
    const [self, setSelf] = (0, react_1.useState)(null);
    const callback = (0, is_js_1.isString)(eventOrCallback) || (0, is_js_1.isArray)(eventOrCallback) ? callbackOrOptions : eventOrCallback;
    const options = (0, is_js_1.isFunction)(callbackOrOptions) ? optionsOrNothing : callbackOrOptions;
    const callbackRef = (0, react_1.useRef)(callback);
    (0, react_1.useEffect)(() => {
        callbackRef.current = callback;
    }, [callback]);
    (0, react_1.useEffect)(() => {
        if (callbackRef.current && (space === null || space === void 0 ? void 0 : space.members) && !(options === null || options === void 0 ? void 0 : options.skip)) {
            const listener = (params) => {
                var _a;
                (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, params);
            };
            if (!(0, is_js_1.isFunction)(eventOrCallback) && eventOrCallback) {
                space === null || space === void 0 ? void 0 : space.members.subscribe(eventOrCallback, listener);
            }
            else {
                space === null || space === void 0 ? void 0 : space.members.subscribe(listener);
            }
            return () => {
                if (!(0, is_js_1.isFunction)(eventOrCallback) && eventOrCallback) {
                    space === null || space === void 0 ? void 0 : space.members.unsubscribe(eventOrCallback, listener);
                }
                else {
                    space === null || space === void 0 ? void 0 : space.members.unsubscribe(listener);
                }
            };
        }
    }, [space === null || space === void 0 ? void 0 : space.members, options === null || options === void 0 ? void 0 : options.skip]);
    (0, react_1.useEffect)(() => {
        if (!space)
            return;
        let ignore = false;
        const updateState = (updatedSelf, updatedMembers) => {
            if (ignore)
                return;
            setSelf(updatedSelf);
            setMembers([...updatedMembers]);
            setOthers(updatedMembers.filter((member) => member.connectionId !== (updatedSelf === null || updatedSelf === void 0 ? void 0 : updatedSelf.connectionId)));
        };
        const handler = ({ members: updatedMembers }) => __awaiter(this, void 0, void 0, function* () {
            const updatedSelf = yield space.members.getSelf();
            updateState(updatedSelf, updatedMembers);
        });
        const init = () => __awaiter(this, void 0, void 0, function* () {
            const initSelf = yield space.members.getSelf();
            const initMembers = yield space.members.getAll();
            updateState(initSelf, initMembers);
            space.subscribe('update', handler);
        });
        init();
        return () => {
            ignore = true;
            space.unsubscribe('update', handler);
        };
    }, [space]);
    return {
        space,
        members,
        others,
        self,
        connectionError,
        channelError,
    };
}
exports.useMembers = useMembers;
//# sourceMappingURL=useMembers.js.map