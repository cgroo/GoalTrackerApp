export default class CursorDispensing {
    constructor(emitCursorUpdate) {
        this.emitCursorUpdate = emitCursorUpdate;
        this.buffer = {};
    }
    setEmitCursorUpdate(update) {
        this.emitCursorUpdate(update);
    }
    emitFromBatch() {
        for (let connectionId in this.buffer) {
            const buffer = this.buffer[connectionId];
            const update = buffer.shift();
            if (!update)
                continue;
            setTimeout(() => this.setEmitCursorUpdate(update.cursor), update.offset);
        }
        if (this.bufferHaveData()) {
            this.emitFromBatch();
        }
    }
    bufferHaveData() {
        return (Object.entries(this.buffer)
            .map(([, v]) => v)
            .flat().length > 0);
    }
    processBatch(message) {
        const updates = message.data || [];
        updates.forEach((update) => {
            const enhancedMsg = {
                cursor: {
                    clientId: message.clientId,
                    connectionId: message.connectionId,
                    position: update.cursor.position,
                    data: update.cursor.data,
                },
                offset: update.offset,
            };
            if (this.buffer[enhancedMsg.cursor.connectionId]) {
                this.buffer[enhancedMsg.cursor.connectionId].push(enhancedMsg);
            }
            else {
                this.buffer[enhancedMsg.cursor.connectionId] = [enhancedMsg];
            }
        });
        if (this.bufferHaveData()) {
            this.emitFromBatch();
        }
    }
}
