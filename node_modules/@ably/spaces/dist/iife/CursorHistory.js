export default class CursorHistory {
    constructor() { }
    positionsMissing(connections) {
        return Object.keys(connections).some((connectionId) => connections[connectionId] === null);
    }
    messageToUpdate(connectionId, clientId, update) {
        return {
            clientId,
            connectionId,
            position: update.position,
            data: update.data,
        };
    }
    allCursorUpdates(connections, page) {
        return Object.fromEntries(Object.entries(connections).map(([connectionId, cursors]) => {
            var _a;
            const lastMessage = page.items.find((item) => item.connectionId === connectionId);
            if (!lastMessage)
                return [connectionId, cursors];
            const { data = [], clientId } = lastMessage;
            const lastPositionSet = (_a = data[data.length - 1]) === null || _a === void 0 ? void 0 : _a.cursor;
            const lastUpdate = lastPositionSet
                ? {
                    clientId,
                    connectionId,
                    position: lastPositionSet.position,
                    data: lastPositionSet.data,
                }
                : null;
            return [connectionId, lastUpdate];
        }));
    }
    async getLastCursorUpdate(channel, paginationLimit) {
        const members = await channel.presence.get();
        if (members.length === 0)
            return {};
        let connections = members.reduce((acc, member) => ({
            ...acc,
            [member.connectionId]: null,
        }), {});
        const history = await channel.history();
        let pageNo = 1;
        let page = await history.current();
        connections = this.allCursorUpdates(connections, page);
        pageNo++;
        while (pageNo <= paginationLimit && this.positionsMissing(connections) && history.hasNext()) {
            page = await history.next();
            connections = this.allCursorUpdates(connections, page);
            pageNo++;
        }
        return connections;
    }
}
