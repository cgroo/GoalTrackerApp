import EventEmitter, { InvalidArgumentError, inspect } from './utilities/EventEmitter.js';
import Leavers from './Leavers.js';
/**
 * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/avatar.textile?plain=1#L9-L25) -->
 * Avatar stacks are the most common way of showing the online status of members in an application by displaying an avatar for each member. Events are emitted whenever a member enters or leaves a space, or updates their profile data. Additional information can also be provided, such as a profile picture and email address.
 *
 * Subscribe to the space’s { @link Space.members | `members` } property in order to keep your avatar stack updated in realtime.
 *
 * ## Event types
 *
 * The following four event types are emitted by members:
 *
 * > **Moved documentation**
 * >
 * > This documentation has been moved to { @link MembersEventMap }.
 *
 * > **Note**
 * >
 * > Members {@link Space.enter | enter }, {@link Space.leave | leave }, and {@link Space.updateProfileData | update } a {@link Space | space } directly. The space’s { @link Space.members | `members` } property is used to subscribe to these updates.
 *
 * <!-- END WEBSITE DOCUMENTATION -->
 *
 * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/avatar.textile?plain=1#L297-L301) -->
 * ## Avatar stack foundations
 *
 * The Spaces SDK is built upon existing Ably functionality available in Ably’s Core SDKs. Understanding which core features are used to provide the abstractions in the Spaces SDK enables you to manage space state and build additional functionality into your application.
 *
 * Avatar stacks build upon the functionality of the Pub/Sub Channels [presence](https://ably.com/docs/presence-occupancy/presence) feature. Members are entered into the presence set when they { @link Space.enter | enter the space }.
 *
 * <!-- END WEBSITE DOCUMENTATION -->
 *
 * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
 * Handles members within a space.
 * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
 */
class Members extends EventEmitter {
    /** @internal */
    constructor(space) {
        super();
        this.space = space;
        this.lastMemberUpdate = {};
        this.leavers = new Leavers(this.space.options.offlineTimeout);
    }
    /** @internal */
    async processPresenceMessage(message) {
        const { action, connectionId } = message;
        const isLeaver = !!this.leavers.getByConnectionId(connectionId);
        const member = this.createMember(message);
        if (action === 'leave') {
            this.leavers.addLeaver(member, () => this.onMemberOffline(member));
            this.emit('leave', member);
            this.emit('update', member);
        }
        else if (isLeaver) {
            this.leavers.removeLeaver(connectionId);
        }
        if (action === 'enter') {
            this.emit('enter', member);
            this.emit('update', member);
        }
        // Emit profileData updates only if they are different then the last held update.
        // A locationUpdate is handled in Locations.
        if (message.data.profileUpdate.id && this.lastMemberUpdate[connectionId] !== message.data.profileUpdate.id) {
            this.lastMemberUpdate[message.connectionId] = message.data.profileUpdate.id;
            this.emit('updateProfile', member);
            this.emit('update', member);
        }
    }
    /**
     * <!-- This is to avoid duplication of the website documentation. -->
     * See the documentation for {@link getAll}.
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Returns a Promise which resolves to the {@link SpaceMember} object relating to the local connection. Will resolve to `null` if the client hasn't entered the space yet.
     *
     * Example:
     *
     * ```ts
     * const myMember = await space.members.getSelf();
     * ```
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     */
    async getSelf() {
        return this.space.connectionId ? await this.getByConnectionId(this.space.connectionId) : null;
    }
    /**
     * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/avatar.textile?plain=1#L129-L250) -->
     * Space membership can be retrieved in one-off calls. These are local calls and retrieve the membership retained in memory by the SDK. One-off calls to retrieve membership can be used for operations such as displaying a member’s own profile data to them, or retrieving a list of all other members to use to {@link Space.updateProfileData | update their profile data }.
     *
     * The following is an example of retrieving a member’s own member object:
     *
     * ```javascript
     * const myMemberInfo = await space.members.getSelf();
     * ```
     * The following is an example payload returned by `space.members.getSelf()`:
     *
     * ```json
     *   {
     *     "clientId": "clemons#142",
     *     "connectionId": "hd9743gjDc",
     *     "isConnected": true,
     *     "lastEvent": {
     *       "name": "enter",
     *       "timestamp": 1677595689759
     *     },
     *     "location": null,
     *     "profileData": {
     *       "username": "Claire Lemons",
     *       "avatar": "https://slides-internal.com/users/clemons.png"
     *     }
     *   }
     * ```
     * The following is an example of retrieving an array of member objects for all members other than the member themselves. Ths includes members that have recently left the space, but have not yet been removed.
     *
     * ```javascript
     * const othersMemberInfo = await space.members.getOthers();
     * ```
     * The following is an example payload returned by `space.members.getOthers()`:
     *
     * ```json
     * [
     *   {
     *     "clientId": "torange#1",
     *     "connectionId": "tt7233ghUa",
     *     "isConnected": true,
     *     "lastEvent": {
     *       "name": "enter",
     *       "timestamp": 167759566354
     *     },
     *     "location": null,
     *     "profileData": {
     *       "username": "Tara Orange",
     *       "avatar": "https://slides-internal.com/users/torange.png"
     *     }
     *   },
     *   {
     *       "clientId": "amint#5",
     *       "connectionId": "hg35a4fgjAs",
     *       "isConnected": true,
     *         "lastEvent": {
     *         "name": "update",
     *       "timestamp": 173459567340
     *       },
     *       "location": null,
     *       "profileData": {
     *         "username": "Arit Mint",
     *         "avatar": "https://slides-internal.com/users/amint.png"
     *       }
     *   }
     * ]
     * ```
     * The following is an example of retrieving an array of all member objects, including the member themselves. Ths includes members that have recently left the space, but have not yet been removed.
     *
     * ```javascript
     * const allMembers = await space.members.getAll();
     * ```
     * The following is an example payload returned by `space.members.getAll()`:
     *
     * ```json
     * [
     *   {
     *     "clientId": "clemons#142",
     *     "connectionId": "hd9743gjDc",
     *     "isConnected": false,
     *     "lastEvent": {
     *       "name": "enter",
     *       "timestamp": 1677595689759
     *     },
     *     "location": null,
     *     "profileData": {
     *       "username": "Claire Lemons",
     *       "avatar": "https://slides-internal.com/users/clemons.png"
     *     }
     *   },
     *   {
     *       "clientId": "amint#5",
     *       "connectionId": "hg35a4fgjAs",
     *       "isConnected": true,
     *         "lastEvent": {
     *         "name": "update",
     *       "timestamp": 173459567340
     *       },
     *       "location": null,
     *       "profileData": {
     *         "username": "Arit Mint",
     *         "avatar": "https://slides-internal.com/users/amint.png"
     *       }
     *   },
     *   {
     *     "clientId": "torange#1",
     *     "connectionId": "tt7233ghUa",
     *     "isConnected": true,
     *     "lastEvent": {
     *       "name": "enter",
     *       "timestamp": 167759566354
     *     },
     *     "location": null,
     *     "profileData": {
     *       "username": "Tara Orange",
     *       "avatar": "https://slides-internal.com/users/torange.png"
     *     }
     *   }
     * ]
     * ```
     * <!-- END WEBSITE DOCUMENTATION -->
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Returns a Promise which resolves to an array of all {@link SpaceMember} objects (members) currently in the space, including any who have left and not yet timed out. (_see: {@link SpaceOptions.offlineTimeout | offlineTimeout}_)
     *
     * Example:
     *
     * ```ts
     * const allMembers = await space.members.getAll();
     * ```
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     */
    async getAll() {
        const presenceMembers = await this.space.channel.presence.get();
        const members = presenceMembers.map((m) => this.createMember(m));
        return members.concat(this.leavers.getAll().map((l) => l.member));
    }
    /**
     * <!-- This is to avoid duplication of the website documentation. -->
     * See the documentation for {@link getAll}.
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Returns a Promise which resolves to an array of all {@link SpaceMember} objects (members) currently in the space, excluding your own member object.
     *
     * Example:
     *
     * ```ts
     * const otherMembers = await space.members.getOthers();
     * ```
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     */
    async getOthers() {
        const members = await this.getAll();
        return members.filter((m) => m.connectionId !== this.space.connectionId);
    }
    subscribe(listenerOrEvents, listener) {
        try {
            super.on(listenerOrEvents, listener);
        }
        catch (e) {
            if (e instanceof InvalidArgumentError) {
                throw new InvalidArgumentError('Members.subscribe(): Invalid arguments: ' + inspect([listenerOrEvents, listener]));
            }
            else {
                throw e;
            }
        }
    }
    unsubscribe(listenerOrEvents, listener) {
        try {
            super.off(listenerOrEvents, listener);
        }
        catch (e) {
            if (e instanceof InvalidArgumentError) {
                throw new InvalidArgumentError('Members.unsubscribe(): Invalid arguments: ' + inspect([listenerOrEvents, listener]));
            }
            else {
                throw e;
            }
        }
    }
    /** @internal */
    async getByConnectionId(connectionId) {
        var _a;
        const members = await this.getAll();
        return (_a = members.find((m) => m.connectionId === connectionId)) !== null && _a !== void 0 ? _a : null;
    }
    createMember(message) {
        return {
            clientId: message.clientId,
            connectionId: message.connectionId,
            isConnected: message.action !== 'leave',
            profileData: message.data.profileUpdate.current,
            location: message.data.locationUpdate.current,
            lastEvent: {
                name: message.action,
                timestamp: message.timestamp,
            },
        };
    }
    async onMemberOffline(member) {
        this.leavers.removeLeaver(member.connectionId);
        this.emit('remove', member);
        this.emit('update', member);
        if (member.location) {
            this.space.locations.emit('update', {
                previousLocation: member.location,
                currentLocation: null,
                member: { ...member, location: null },
            });
        }
        this.space.emit('update', { members: await this.getAll() });
    }
}
export default Members;
