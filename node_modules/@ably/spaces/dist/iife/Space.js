import Ably from 'ably';
import EventEmitter, { InvalidArgumentError, inspect } from './utilities/EventEmitter.js';
import Locations from './Locations.js';
import Cursors from './Cursors.js';
import Members from './Members.js';
import Locks from './Locks.js';
import SpaceUpdate from './SpaceUpdate.js';
import { ERR_NOT_ENTERED_SPACE } from './Errors.js';
import { isFunction, isObject } from './utilities/is.js';
import { VERSION } from './version.js';
const SPACE_CHANNEL_TAG = '::$space';
const SPACE_OPTIONS_DEFAULTS = {
    offlineTimeout: 120000,
    cursors: {
        outboundBatchInterval: 25,
        paginationLimit: 5,
    },
};
/**
 * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/space.textile?plain=1#L9-L22) -->
 * A space is a virtual area of your application in which realtime collaboration between users can take place. You can have any number of virtual spaces within an application, with a single space being anything from a web page, a sheet within a spreadsheet, an individual slide in a slideshow, or the entire slideshow itself.
 *
 * The following features can be implemented within a space:
 *
 * - Avatar stack, via the {@link members | `members`} property
 * - Member location, via the {@link locations | `locations`} property
 * - Live cursors, via the {@link cursors | `cursors`} property
 * - Component locking, via the {@link locks | `locks`} property
 *
 * A `Space` instance consists of a state object that represents the realtime status of all members in a given virtual space. This includes a list of which members are currently online or have recently left and each member’s location within the application. The position of members’ cursors are excluded from the space state due to their high frequency of updates. In the beta release, which UI components members have locked are also excluded from the space state.
 *
 * Space state can be {@link subscribe | subscribed} to by using a `Space` object. Alternatively, subscription listeners can be registered for individual features, such as avatar stack events and member location updates. These individual subscription listeners are intended to provide flexibility when implementing collaborative features. Individual listeners are client-side filtered events, so irrespective of whether you choose to subscribe to the space state or individual listeners, each event only counts as a single message.
 *
 * To subscribe to any events in a space, you first need to create or retrieve a space.
 *
 * <!-- END WEBSITE DOCUMENTATION -->
 *
 * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
 * An instance of a Space created using {@link default.get | spaces.get}. Inherits from {@link EventEmitter}.
 * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
 */
class Space extends EventEmitter {
    /** @internal */
    constructor(name, client, options) {
        super();
        this.presenceUpdate = ({ data, extras }) => {
            if (!extras) {
                return this.channel.presence.update(data);
            }
            return this.channel.presence.update(Ably.Realtime.PresenceMessage.fromValues({ data, extras }));
        };
        this.presenceEnter = ({ data, extras }) => {
            if (!extras) {
                return this.channel.presence.enter(data);
            }
            return this.channel.presence.enter(Ably.Realtime.PresenceMessage.fromValues({ data, extras }));
        };
        this.presenceLeave = ({ data, extras }) => {
            if (!extras) {
                return this.channel.presence.leave(data);
            }
            return this.channel.presence.leave(Ably.Realtime.PresenceMessage.fromValues({ data, extras }));
        };
        this.client = client;
        this.options = this.setOptions(options);
        this.connectionId = this.client.connection.id;
        this.name = name;
        this.channelName = `${name}${SPACE_CHANNEL_TAG}`;
        this.channel = this.client.channels.get(this.channelName, { params: { agent: `spaces/${VERSION}` } });
        this.onPresenceUpdate = this.onPresenceUpdate.bind(this);
        this.channel.presence.subscribe(this.onPresenceUpdate);
        this.locations = new Locations(this, this.presenceUpdate);
        this.cursors = new Cursors(this);
        this.members = new Members(this);
        this.locks = new Locks(this, this.presenceUpdate);
    }
    setOptions(options) {
        var _a, _b, _c, _d, _e;
        const { offlineTimeout, cursors: { outboundBatchInterval, paginationLimit }, } = SPACE_OPTIONS_DEFAULTS;
        return {
            offlineTimeout: (_a = options === null || options === void 0 ? void 0 : options.offlineTimeout) !== null && _a !== void 0 ? _a : offlineTimeout,
            cursors: {
                outboundBatchInterval: (_c = (_b = options === null || options === void 0 ? void 0 : options.cursors) === null || _b === void 0 ? void 0 : _b.outboundBatchInterval) !== null && _c !== void 0 ? _c : outboundBatchInterval,
                paginationLimit: (_e = (_d = options === null || options === void 0 ? void 0 : options.cursors) === null || _d === void 0 ? void 0 : _d.paginationLimit) !== null && _e !== void 0 ? _e : paginationLimit,
            },
        };
    }
    async onPresenceUpdate(message) {
        await this.members.processPresenceMessage(message);
        await this.locations.processPresenceMessage(message);
        await this.locks.processPresenceMessage(message);
        this.emit('update', { members: await this.members.getAll() });
    }
    /**
     * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/space.textile?plain=1#L43-L55) -->
     * Entering a space will register a client as a member and emit an {@link MembersEventMap.enter | `enter` } event to all subscribers. Use the `enter()` method to enter a space.
     *
     * Being entered into a space is required for members to:
     *
     * - { @link updateProfileData | Update their profile data. }
     * - { @link Locations.set | Set their location. }
     * - { @link Cursors.set | Set their cursor position. }
     *
     * The following is an example of entering a space:
     *
     * ```javascript
     * await space.enter();
     * ```
     * <!-- END WEBSITE DOCUMENTATION -->
     *
     * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/space.textile?plain=1#L71-L82) -->
     * > **Moved documentation**
     * >
     * > This documentation has been moved to { @link ProfileData }.
     *
     * Profile data is returned in the payload of all space events.
     *
     * The following is an example of setting profile data when entering a space:
     *
     * ```javascript
     * await space.enter({
     *   username: 'Claire Oranges',
     *   avatar: 'https://slides-internal.com/users/coranges.png',
     * });
     * ```
     * <!-- END WEBSITE DOCUMENTATION -->
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Enter the space. Can optionally take `profileData`. This data can be an arbitrary JSON-serializable object which will be attached to the {@link SpaceMember | member object }. Returns all current space members.
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     *
     * @param profileData Data to associate with the member who is entering the space.
     */
    async enter(profileData = null) {
        return new Promise((resolve) => {
            const presence = this.channel.presence;
            const presenceListener = async (presenceMessage) => {
                if (!(presenceMessage.clientId == this.client.auth.clientId &&
                    presenceMessage.connectionId == this.client.connection.id)) {
                    return;
                }
                presence.unsubscribe(presenceListener);
                const presenceMessages = await presence.get();
                presenceMessages.forEach((msg) => this.locks.processPresenceMessage(msg));
                const members = await this.members.getAll();
                resolve(members);
            };
            presence.subscribe(['enter', 'present'], presenceListener);
            const update = new SpaceUpdate({ self: null, extras: null });
            this.presenceEnter(update.updateProfileData(profileData));
        });
    }
    async updateProfileData(profileDataOrUpdateFn) {
        const self = await this.members.getSelf();
        if (!isObject(profileDataOrUpdateFn) && !isFunction(profileDataOrUpdateFn)) {
            throw new InvalidArgumentError('Space.updateProfileData(): Invalid arguments: ' + inspect([profileDataOrUpdateFn]));
        }
        let update = new SpaceUpdate({ self, extras: self ? this.locks.getLockExtras(self.connectionId) : null });
        if (!self) {
            const data = update.updateProfileData(isFunction(profileDataOrUpdateFn) ? profileDataOrUpdateFn(null) : profileDataOrUpdateFn);
            await this.presenceEnter(data);
            return;
        }
        else {
            const data = update.updateProfileData(isFunction(profileDataOrUpdateFn) ? profileDataOrUpdateFn(self.profileData) : profileDataOrUpdateFn);
            return this.presenceUpdate(data);
        }
    }
    /**
     * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/space.textile?plain=1#L59-L67) -->
     * Leaving a space will emit a { @link MembersEventMap.leave | `leave` } event to all subscribers.
     *
     * The following is an example of explicitly leaving a space:
     *
     * ```javascript
     * await space.leave();
     * ```
     * Members will implicitly leave a space after 15 seconds if they abruptly disconnect. If experiencing network disruption, and they reconnect within 15 seconds, then they will remain part of the space and no `leave` event will be emitted.
     *
     * <!-- END WEBSITE DOCUMENTATION -->
     *
     * <!-- BEGIN CLASS-DEFINITIONS DOCUMENTATION -->
     * Leave the space. Can optionally take `profileData`. This triggers the `leave` event, but does not immediately remove the member from the space. See {@link SpaceOptions.offlineTimeout | offlineTimeout }.
     * <!-- END CLASS-DEFINITIONS DOCUMENTATION -->
     *
     * @param profileData If specified, this updated profile data will accompany the { @link MembersEventMap.leave | `leave` } event.
     */
    async leave(profileData = null) {
        const self = await this.members.getSelf();
        if (!self) {
            throw ERR_NOT_ENTERED_SPACE();
        }
        const update = new SpaceUpdate({ self, extras: this.locks.getLockExtras(self.connectionId) });
        let data;
        // Use arguments so it's possible to deliberately nullify profileData on leave
        if (arguments.length > 0) {
            data = update.updateProfileData(profileData);
        }
        else {
            data = update.noop();
        }
        await this.presenceLeave(data);
    }
    /**
     * <!-- BEGIN WEBSITE DOCUMENTATION (https://github.com/ably/docs/blob/cb5de6a6a40abdcb0d9d5af825928dd62dc1ca64/content/spaces/space.textile?plain=1#L191-L197) -->
     * The current state of the space can be retrieved in a one-off call. This will return an array of all `member` objects currently in the space. This is a local call and retrieves the membership of the space retained in memory by the SDK.
     *
     * The following is an example of retrieving the current space state. Ths includes members that have recently left the space, but have not yet been removed:
     *
     * ```javascript
     * const spaceState = await space.getState();
     * ```
     * <!-- END WEBSITE DOCUMENTATION -->
     */
    async getState() {
        const members = await this.members.getAll();
        return { members };
    }
    subscribe(listenerOrEvents, listener) {
        try {
            super.on(listenerOrEvents, listener);
        }
        catch (e) {
            if (e instanceof InvalidArgumentError) {
                throw new InvalidArgumentError('Space.subscribe(): Invalid arguments: ' + inspect([listenerOrEvents, listener]));
            }
            else {
                throw e;
            }
        }
    }
    unsubscribe(listenerOrEvents, listener) {
        try {
            super.off(listenerOrEvents, listener);
        }
        catch (e) {
            if (e instanceof InvalidArgumentError) {
                throw new InvalidArgumentError('Space.unsubscribe(): Invalid arguments: ' + inspect([listenerOrEvents, listener]));
            }
            else {
                throw e;
            }
        }
    }
}
export default Space;
