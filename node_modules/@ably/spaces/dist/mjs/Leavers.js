class Leavers {
    constructor(offlineTimeout) {
        this.offlineTimeout = offlineTimeout;
        this.leavers = [];
    }
    getByConnectionId(connectionId) {
        return this.leavers.find((leaver) => leaver.member.connectionId === connectionId);
    }
    getAll() {
        return this.leavers;
    }
    addLeaver(member, timeoutCallback) {
        // remove any existing leaver to prevent old timers from firing
        this.removeLeaver(member.connectionId);
        this.leavers.push({
            member,
            timeoutId: setTimeout(timeoutCallback, this.offlineTimeout),
        });
    }
    removeLeaver(connectionId) {
        const leaverIndex = this.leavers.findIndex((leaver) => leaver.member.connectionId === connectionId);
        if (leaverIndex >= 0) {
            clearTimeout(this.leavers[leaverIndex].timeoutId);
            this.leavers.splice(leaverIndex, 1);
        }
    }
}
export default Leavers;
//# sourceMappingURL=Leavers.js.map