var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React from 'react';
import { useSpaces } from '../useSpaces.js';
export const SpaceContext = React.createContext(undefined);
export const SpaceProvider = ({ name, options, children }) => {
    const [space, setSpace] = React.useState(undefined);
    const spaces = useSpaces();
    const optionsRef = React.useRef(options);
    React.useEffect(() => {
        optionsRef.current = options;
    }, [options]);
    React.useEffect(() => {
        let ignore = false;
        const init = () => __awaiter(void 0, void 0, void 0, function* () {
            if (!spaces) {
                throw new Error('Could not find spaces client in context. ' +
                    'Make sure your spaces hooks are called inside an <SpacesProvider>');
            }
            const spaceInstance = yield spaces.get(name, optionsRef.current);
            if (spaceInstance && !space && !ignore) {
                setSpace(spaceInstance);
            }
        });
        init();
        return () => {
            ignore = true;
        };
    }, [name, spaces]);
    return React.createElement(SpaceContext.Provider, { value: space }, children);
};
//# sourceMappingURL=SpaceContext.js.map