import { useContext, useEffect, useState } from 'react';
import { SpaceContext } from './contexts/SpaceContext.js';
/*
 * Returns the status of a lock and, if it has been acquired, the member holding the lock
 */
export function useLock(lockId) {
    const space = useContext(SpaceContext);
    const [status, setStatus] = useState(null);
    const [member, setMember] = useState(null);
    const initialized = status !== null;
    useEffect(() => {
        if (!space)
            return;
        const handler = (lock) => {
            if (lock.id !== lockId)
                return;
            if (lock.status === 'unlocked') {
                setStatus(null);
                setMember(null);
            }
            else {
                setStatus(lock.status);
                setMember(lock.member);
            }
        };
        space.locks.subscribe('update', handler);
        return () => {
            space === null || space === void 0 ? void 0 : space.locks.unsubscribe('update', handler);
        };
    }, [space, lockId]);
    useEffect(() => {
        if (initialized || !space)
            return;
        const lock = space === null || space === void 0 ? void 0 : space.locks.get(lockId);
        if (lock) {
            setMember(lock.member);
            setStatus(lock.status);
        }
    }, [initialized, space]);
    return { status, member };
}
//# sourceMappingURL=useLock.js.map