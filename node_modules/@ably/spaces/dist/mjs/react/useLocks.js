import { useEffect, useRef } from 'react';
import { isArray, isFunction, isString } from '../utilities/is.js';
import { useSpace } from './useSpace.js';
function useLocks(eventOrCallback, callbackOrOptions, optionsOrNothing) {
    const spaceContext = useSpace();
    const { space } = spaceContext;
    const callback = isString(eventOrCallback) || isArray(eventOrCallback) ? callbackOrOptions : eventOrCallback;
    const options = isFunction(callbackOrOptions) ? optionsOrNothing : callbackOrOptions;
    const callbackRef = useRef(callback);
    useEffect(() => {
        callbackRef.current = callback;
    }, [callback]);
    useEffect(() => {
        if (callbackRef.current && (space === null || space === void 0 ? void 0 : space.locks) && !(options === null || options === void 0 ? void 0 : options.skip)) {
            const listener = (params) => {
                var _a;
                (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, params);
            };
            if (!isFunction(eventOrCallback) && eventOrCallback) {
                space === null || space === void 0 ? void 0 : space.locks.subscribe(eventOrCallback, listener);
            }
            else {
                space === null || space === void 0 ? void 0 : space.locks.subscribe(listener);
            }
            return () => {
                if (!isFunction(eventOrCallback) && eventOrCallback) {
                    space === null || space === void 0 ? void 0 : space.locks.unsubscribe(eventOrCallback, listener);
                }
                else {
                    space === null || space === void 0 ? void 0 : space.locks.unsubscribe(listener);
                }
            };
        }
    }, [space === null || space === void 0 ? void 0 : space.locks, options === null || options === void 0 ? void 0 : options.skip]);
    return spaceContext;
}
export { useLocks };
//# sourceMappingURL=useLocks.js.map