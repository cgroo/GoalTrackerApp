import { useContext, useEffect, useRef } from 'react';
import { SpaceContext } from './contexts/SpaceContext.js';
import { useChannelState } from './useChannelState.js';
import { useConnectionState } from './useConnectionState.js';
export const useSpace = (callback, options) => {
    const space = useContext(SpaceContext);
    const callbackRef = useRef(callback);
    const channelError = useChannelState(space === null || space === void 0 ? void 0 : space.channel);
    const connectionError = useConnectionState();
    useEffect(() => {
        callbackRef.current = callback;
    }, [callback]);
    useEffect(() => {
        if (callbackRef.current && space && !(options === null || options === void 0 ? void 0 : options.skip)) {
            const listener = (params) => {
                var _a;
                (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, params);
            };
            space.subscribe('update', listener);
            return () => space.unsubscribe('update', listener);
        }
    }, [space, options === null || options === void 0 ? void 0 : options.skip]);
    return {
        space,
        enter: space === null || space === void 0 ? void 0 : space.enter.bind(space),
        leave: space === null || space === void 0 ? void 0 : space.leave.bind(space),
        updateProfileData: space === null || space === void 0 ? void 0 : space.updateProfileData.bind(space),
        connectionError,
        channelError,
    };
};
//# sourceMappingURL=useSpace.js.map